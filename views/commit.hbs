<!DOCTYPE html>
<head>
	<meta charset="utf-8"/>
  	<title>user page</title>
	<script src="/js/lib/jquery.min.js"></script>
    <script src="/js/lib/d3.js"></script>
    <style>
        body{
            font:10px arial;
        }
        .axis path,
        .axis line{
            fill:none;
            stroke:#000;
        }

		.dot {
			fill: none;
			stroke: steelblue;
			stroke-width: 2px;
		}

        .week-line{
            fill:none;
            stroke: green;
            stroke-width: 3px;
        }

		.active{
			fill:red;
		}


	</style>
</head>
<body>
	<h1>Commit Activity</h1>
    <script>
		window.onload = function(){
			// d3 settings
			var margin = {
				top:50,
				right:30,
				bottom: 30,
				left:50
			};

			var width = 900 - margin.left - margin.right;
			var height = 400 - margin.top - margin.bottom;
			var sectionHeight = height/2-10;

			var svgBar = d3.select("body").append("svg")
					.attr({
						"width": width+margin.left+margin.right,
						"height": height+margin.top+margin.bottom
					})
					.append("g")
					.attr("class","bar-chart")
					.attr("transform","translate("+margin.left+","+margin.right+")");

            var svgLine = d3.select("body").append("svg")
                    .attr({
                        "width": width+margin.left+margin.right,
                        "height": height+margin.top+margin.bottom
                    })
                    .append("g")
					.attr("class","line-chart")
                    .attr("transform","translate("+margin.left+","+margin.right+")");

            var days=['Sunday', 'Monday', 'Tuesday', 'Wednesday',
                'Thursday', 'Friday', 'Saturday'];

			// bar chart scale and axis

			var barXScale = d3.scale.ordinal()
					.rangeRoundBands([0,width], 0.3);

			var timeParse = d3.time.format("%x").parse;

			// TODO: reusebility of Scales and Axis

			var barXAxis = d3.svg.axis()
					.scale(barXScale)
					.orient("bottom")
					.tickFormat(function(d){
						return d3.time.format("%m/%d")(timeParse(d))
					});

			// line chart inclue a line and dots

			var lineXScale = d3.scale.ordinal()
					.rangePoints([0,width],0.1)  // user rangePoints instead of rangeBands
					.domain(days);

			var lineXAxis = d3.svg.axis()
					.scale(lineXScale)
					.orient("bottom");

			// y scale

			var barYScale = d3.scale.linear()
					.range([sectionHeight, 0]);

            var lineYScale = d3.scale.linear()
                    .range([sectionHeight, 0]);

			// Use dispatch to sync views

			var dispatch = d3.dispatch("load", "statechange");
			var data;

            var paramsArr = $(location).attr('pathname');
            paramsArr = paramsArr.split('/');
            paramsArr.shift();
            paramsArr.pop()
            var params = '?username=' + paramsArr[1] + '&repo=' + paramsArr[2];

			d3.json('http://localhost:3030/commit'+params,function(err,json){
				if(err) throw err;

				var xDomain = []
                // handle date
                json.forEach(function(d){
                    var date = new Date(d["week"]*1000);
                    var formatter = d3.time.format("%x");
                    d["week"] = formatter(date)
                    xDomain.push(d["week"]);
                });

				barXScale.domain(xDomain);

				barYScale.domain(d3.extent(json, function(d){
					return d.total;
				}));

                lineYScale.domain([
						d3.min(json, function(j){
							return d3.min(j.days)
						}),
						d3.max(json, function(j){
                            return d3.max(j.days)
						})
				])


//				!TODO: Why it's not working???????
//				data = d3.map(json, function(d){
//					return d.week;
//				});

                data = d3.nest()
                        .key(function(d){
                            return d.week
                        })
						.rollup(function(d){
						  return d[0]; // use rollup to handle rest of the data
						})
						.entries(json);

				/**
				 * Dispatch Events
				 * http://bl.ocks.org/mbostock/5872848
				 */

				// initiate
				// TODO: should be using week as passing parameter
				dispatch.load(data[data.length-1]);
				//dispatch.statechange(data[data.length-1])
			})

			dispatch.on("load.bar", function(param){
				// draw the entire bar chart

				var bars = d3.select(".bar-chart").selectAll(".bar")
						.data(data)
						.enter()
						.append("rect")
						.attr("class","bar")
						.attr({
							"x": function(d){
								return barXScale(d.key);
							},
							"y": function(d){
								return barYScale(d.values.total)
							},
							"height": function(d){
                                return sectionHeight - barYScale(d.values.total)
							},
							"width": barXScale.rangeBand()
						})
					// ad hoc to initiate statechange:bar for latest day
						.style("fill", function(d,i){
							return i==(data.length-1) ? "red" : "black";
						})

				svgBar.append("g")
						.attr("transform","translate(0,"+sectionHeight+")")
						.attr("class","x axis bar")
						.call(barXAxis)
						.selectAll("text")
						.attr("transform", "rotate(-90)")
						.style("text-anchor", "end")
						.attr({
							"dx": "-0.8em",
							"dy": "0.15em"
						});


				// use param bind statechange to the latest day
				dispatch.statechange(param);
				// bind click events
				// TODO: Control Siblings in d3?
				bars.on("click", function(d){
					d3.selectAll(".bar").classed("active",false);
					dispatch.statechange(d);
					d3.select(this).classed("active",true)
				});



                dispatch.on("statechange.bar", function(param){
                    //TODO: how to use statechange to change only one bar
                });

			});

			dispatch.on("load.line", function(param){
                // dots
                var weekday = param.values.days;

                var dots = svgLine.selectAll(".dot")
                        .data(weekday)
                        .enter()
                        .append("circle")
						.attr("class","dot")
                        .attr({
                            "r": 5,
                            "cx": function(d,i){
                                return lineXScale(days[i])
                            },
                            "cy": function(d,i){
                                return lineYScale(d)
                            }
                        });
				// line

				var lineGenerator = d3.svg.line().interpolate("cardinal") // cardinal interpolate looks more smooth
						.x(function(d,i){
							return lineXScale(days[i])
						})
						.y(function(d){
							return lineYScale(d);
						});

				var line = svgLine
						.append("path")
						.attr("d", lineGenerator(weekday)) // notice how to pass data to generator d attribute
						.attr("class", "week-line");


                svgLine.append("g")
                        .attr("class","x axis line")
                        .attr("transform","translate(0,"+sectionHeight+")")
                        .call(lineXAxis);

                dispatch.on("statechange.line", function(param){

					dots.data(param.values.days) // update data before transition
							.transition()
							.duration(1000)
							.delay(200)
							.attr("cy", function(d){
								return lineYScale(d)
							});

					line.transition()
                            .duration(1000)
                            .attr("d", lineGenerator(param.values.days))


                })

            });





		};
	</script>

</body>
