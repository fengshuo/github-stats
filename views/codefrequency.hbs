<!DOCTYPE html>
<head>
	<meta charset="utf-8"/>
  	<title>user page</title>
	<script src="/js/lib/jquery.min.js"></script>
    <script src="/js/lib/d3.js"></script>
    <style>
        body{
            font:10px arial;
        }
        .axis path,
        .axis line{
            fill:none;
            stroke:#000;
        }

		.add,
		.add-area {
			fill: green;
		}

		.delete,
		.delete-area {
			fill: red;
		}

	</style>
</head>
<body>
	<h1>Code Frequency</h1>
    <script>
		window.onload = function(){
			// d3 settings
			var margin = {
				top:50,
				right:30,
				bottom: 10,
				left:80
			};

			var width = 900 - margin.left - margin.right;
			var height = 800 - margin.top - margin.bottom;

			var svg = d3.select("body").append("svg")
					.attr({
						"width": width+margin.left+margin.right,
						"height": height+margin.top+margin.bottom
					})
					.append("g")
					.attr("transform","translate("+margin.left+","+margin.right+")");

            var svg2 = d3.select("body").append("svg")
                    .attr({
                        "width": width+margin.left+margin.right,
                        "height": height+margin.top+margin.bottom
                    })
                    .append("g")
                    .attr("transform","translate("+margin.left+","+margin.right+")");


            var xScale = d3.scale.ordinal()
					.rangeRoundBands([0,width],.1,0) // remove outerpadding by the thrid parameter

            var timeParse = d3.time.format("%x").parse;

			/**
			 * TODO:
			 * adjust xAxis style based on data?
			 */

			var xAxis = d3.svg.axis()
					.scale(xScale)
					.orient("top")
                    .innerTickSize(0)
                    .tickFormat(function(d){
                        return d3.time.format("%m/%d")(timeParse(d))
                    })
			// usage of tickValues:
			// http://bl.ocks.org/mbostock/3212294
			// but not suitable in this case
//					.tickValues(xScale.domain().filter(function(d,i){
//						return !(i%2)
//					}))

			var yScale = d3.scale.linear()
					.range([height, 0]);

			var yAxis = d3.svg.axis()
					.scale(yScale)
					.orient("left");

            var paramsArr = $(location).attr('pathname');
            paramsArr = paramsArr.split('/');
            paramsArr.shift();
            paramsArr.pop()
            var params = '?username=' + paramsArr[1] + '&repo=' + paramsArr[2];

			d3.json('http://localhost:3030/codefrequency'+params,function(err,json){
				if(err) throw err;

				/**
				 * Bar Chart
				 */

				var xDomain = [];
				// handle date
				json.forEach(function(d){
					var date = new Date(d[0]*1000);
					var formatter = d3.time.format("%x");
					d[0] = formatter(date)
					xDomain.push(d[0]);
				});

				// update scale
				xScale.domain(xDomain);
				yScale.domain([
                    d3.min(json, function(d){
                        return d[2];
                    }),
					d3.max(json, function(d){
						return d[1];
					})

				]);


				svg.selectAll(".add")
						.data(json)
						.enter()
						.append("rect")
						.attr({
							"x": function(d){
								return xScale(d[0])
							},
							"y": function(d){
								return  yScale(d[1]);
							},
							"height": function(d){
								return yScale(0) - yScale(d[1])
							},
							"width": xScale.rangeBand()
						})
						.attr("class","add")

				svg.selectAll(".delete")
						.data(json)
						.enter()
						.append("rect")
                        .attr({
                            "x": function(d){
                                return xScale(d[0])
                            },
                            "y": function(d){
                                return yScale(0);
                            },
                            "height": function(d){
                                return yScale(d[2]) - yScale(0)
                            },
                            "width": xScale.rangeBand()
                        })
                        .attr("class","delete")


				// axis
				svg.append("g")
						.attr("transform","translate(0,"+ yScale(0) + ")")
						.attr("class","x axis")
						.call(xAxis)
						.selectAll("text")
						.attr({
							'text-anchor': 'end',
							'dx': '-1.55em',
							'dy': '0.15em',
							'transform': 'rotate(-90)'
						})

                svg.append("g")
                        .attr("class","y axis")
                        .call(yAxis);


				/**
				 * Area Chart
				 */
				var areaGeneratorAdd = d3.svg.area()
						.x(function(d){
							return xScale(d[0]);
						})
						.y0(yScale(0))
						.y1(function(d){
							return yScale(d[1]);
						});

                var areaGeneratorDelete = d3.svg.area()
                        .x(function(d){
                            return xScale(d[0]);
                        })
                        .y1(yScale(0))
                        .y0(function(d){
                            return yScale(d[2]);
                        });

				svg2.append("path")
						.datum(json)
						.attr("d", areaGeneratorAdd)
						.attr("class","add-area")

                svg2.append("path")
                        .datum(json)
                        .attr("d", areaGeneratorDelete)
                        .attr("class","delete-area")
                    // axis
                svg2.append("g")
                        .attr("transform","translate(0,"+ yScale(0) + ")")
                        .attr("class","x axis")
                        .call(xAxis);

                svg2.append("g")
                        .attr("class","y axis")
                        .call(yAxis);



			})

		};
	</script>

</body>
