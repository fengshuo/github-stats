<!DOCTYPE html>
<head>
	<meta charset="utf-8"/>
  <title>others page</title>
	<script src="/js/lib/jquery.min.js"></script>
  <script src="/js/lib/d3.js"></script>
  <style>
	.axis path,
	.axis line{
		fill:none;
		stroke:#000;
	}

	.svg-bar {
		position: absolute;
		right: 0;
	}

	.svg-donut {
		position: absolute;
		top: 950px;
	}

	.svg-bar-ctrl {
		position: absolute;
		left: 30px;
		width: 100px;
	}

	.svg-bar-ctrl input {
		display: block;
	}

	</style>
</head>
<body>

<div class="svg-bar-ctrl">
	<select class="metric" name="metric">
		<option value="forks_count" selected="selected">forks</option>
		<option value="stargazers_count">stargazers</option>
		<option value="watchers_count">watchers</option>
		<option value="open_issues_count">issues</option>
	</select>
</div>

<script type="text/javascript">
	window.onload = function(){
		var margin = {
			top:30,
			right:30,
			bottom:50,
			left:250
		};

		var width = 900 - margin.left - margin.right;
		var height = 500 - margin.top - margin.bottom;

		/**
		 * bar chart setting
		 */
		var svg = d3.select("body").append("svg")
					.attr({
						"width": width + margin.left + margin.right,
						"height": height + margin.top + margin.bottom
					})
					.attr("class", "svg-bar")
					.append("g")
					.attr("transform", "translate("+margin.left+","+margin.right+")");


		// scale
		var xScale = d3.scale.linear()
								.range([0, width]);

		var yScale = d3.scale.ordinal()
									.rangeRoundBands([0,height], .3);

		// axis
		var xAxis = d3.svg.axis()
								.scale(xScale)
								.orient("bottom");

		var yAxis = d3.svg.axis()
								.scale(yScale)
								.orient("left");

		/**
		 * donut chart setting
		 */
		var svgPie = d3.select("body")
									.append("svg")
									.attr({
										"width": width,
										"height": height
									})
									.attr("class","svg-donut")
									.append("g")
									.attr("transform", "translate("+width/2+","+height/2+")");

		var arcGenerator = d3.svg.arc()
											.innerRadius(100)
											.outerRadius(200);

		var donutLayout = d3.layout.pie()
										.value(function(d){
											return d.count;
										});



		/*
		 * load data
		 */
		d3.json('http://localhost:3030/othersRepo', function(err,json){
			console.log(json);
			/**
			 * Filter data
			 * 1. original data, json: pie chart of forked VS created
			 * 2. bar chart data, data: repo created by user
			 */

			/* bar chart data*/
			// reorganize data
			var data = [];
			// filter repo created by user;
			json.forEach(function(j){
				if(!j.fork){
					data.push(j)
				}
			});
			// sort first
			data.sort(function(a,b){
				return a.forks_count >= b.forks_count ? 1 : -1;
			});

			/* donut chart data*/
			var donutData = [
				{
					type:'forked',
					count:0
				},
				{
					type:'created',
					count:0
				}
			];

			json.forEach(function(j){
				if(j.fork){
					donutData[0].count++;
				}else {
					donutData[1].count++;
				}
			});



			// update scale
			xScale.domain([
				0,
				d3.max(data, function(d){
					return d.forks_count;
				})
			]);

			yScale.domain(data.map(function(d){
				return d.name;
			}))

			var groups = svg.selectAll(".bars")
									.data(data, function(d){
										return d.name;
									})
									.enter()
								.append("rect")
									.attr({
										"x": 0,
										"y": function(d){
											return yScale(d.name);
										},
										"height": function(d){
											return yScale.rangeBand();
										},
										"width": function(d){
											return xScale(d.forks_count);
										}
									});

			// render axis
			svg.append("g")
				.attr("class","x axis")
				.attr("transform","translate(0," + height +")")
				.call(xAxis)

		  svg.append("g")
				.attr("class","y axis")
				.call(yAxis);

			// change event listener
			d3.select(".metric").on("change", function(){
				var val = this.value;
				var xScaleCopy = xScale.domain([
					0,
					d3.max(data, function(d){
						return d[val];
					})
				]).copy();

				var xAxisCopy = d3.svg.axis()
												.scale(xScaleCopy)
												.orient("bottom");

				groups.transition()
					.duration(1000)
					.attr({
						"width": function(d){
							return xScaleCopy(d[val])
						}
					});

				// update domain as well
				svg.select(".x.axis").transition()
						.duration(1000)
						.call(xAxisCopy)

			});


			// draw donut chart
			var donut = svgPie.selectAll(".arc")
					 				.data(donutLayout(donutData))
									.enter()
									.append("g")
									.attr("class","donut-arc");

			donut.append("path")
						.attr("d", arcGenerator)
						.style("fill", function(d,i){
							if(i==0){
								return "pink";
							}else {
								return "steelblue"
							}
						});

			// add labels to donut
			donut.append("text")
						.attr("transform", function(d){
							return "translate(" + arcGenerator.centroid(d) + ")";
						})
						.attr("text-anchor", "middle")
						.text(function(d){
							// after processed with layout, the data adhere to selection is different
							return d.data.count;
						})



		});

	}
</script>
</body>
